pipeline {
    agent any
    environment {
        // The credentials ID used in the Jenkins credentials store
        AWS_ACCESS_KEY_ID = credentials('aws')
    }
    options {
        buildDiscarder logRotator(
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '30',
            numToKeepStr: '5'
        )
        timeout(time: 30, unit: 'MINUTES')
    }
    tools {
        maven 'Maven'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/NidhiG9/Super-Project.git']]
                )
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def mvn = tool 'Maven'
                    withSonarQubeEnv('sonarqube-server') {
                        sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=jenkins-project -Dsonar.projectName=jenkins-project"
                    }
                }
            }
        }
        stage('Maven Build') {
            steps {
                sh 'mvn package'
            }
        }
        stage('Nexus Upload') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '18.221.187.121:8081',
                    groupId: 'addressbook',
                    version: '2.0-SNAPSHOT',
                    repository: 'maven-snapshot',
                    credentialsId: 'nexus',
                    artifacts: [
                        [
                            artifactId: 'jenkinsproject',
                            classifier: '',
                            file: 'target/addressbook-2.0.war',
                            type: 'war'
                        ]
                    ]
                )
            }
        }
        stage('Docker Build') {
            steps {
                sh 'docker build -t jenkinsproject .'
            }
        }
        stage('Docker Push') {
            steps {
                sh 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/f3g9m7r9'
                sh 'docker tag jenkinsproject:latest public.ecr.aws/f3g9m7r9/jenkinsproject:latest'
                sh 'docker push public.ecr.aws/f3g9m7r9/jenkinsproject:latest'
            }
        }
        stage('Deployment') {
            steps {
                sh 'aws eks update-kubeconfig --region us-east-2 --name Jenkins-Project'
                sh 'kubectl apply -f Application.yaml'
            }
        }
    }
    post {
        always {
            // One or more steps need to be included within each condition's block.
            echo 'This will run regardless of the pipeline result.'
        }
        success {
            // One or more steps need to be included within each condition's block.
            echo 'This will run only if the pipeline succeeds.'
        }
        failure {
            // One or more steps need to be included within each condition's block.
            echo 'This will run only if the pipeline fails.'
        }
    }
}
